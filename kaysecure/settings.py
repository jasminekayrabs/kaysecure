"""
Django settings for kaysecure project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""


from django import apps
import os
from django.core.mail import send_mail
from pathlib import Path


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-5wr1wm&4mth)9pt0&!t^0sktgt1ine76ch!!nhmjcvkl-)7w_r'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# session data will be stored in the database.
SESSION_ENGINE = 'django.contrib.sessions.backends.db'


# Set the URL to redirect after a successful login
# LOGIN_REDIRECT_URL = '/dashboard/'

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'users',
    'courses',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'csp.middleware.CSPMiddleware',
]

#Implementing a Content Security Policy (CSP) is a powerful way to help protect your site from XSS attacks. CSP can be used to specify which resources the user agent is allowed to load for a given page. This adds an extra layer of security by helping to detect and mitigate certain types of attacks, including XSS and data injection attacks.
# CSP_DEFAULT_SRC = ("'self'",)
# CSP_IMG_SRC = ("'self'", 'data:', 'https://trusted.com/')
# CSP_SCRIPT_SRC = ("'self'", 'https://trustedscripts.com/')
# CSP_STYLE_SRC = ("'self'", "'unsafe-inline'")

CSP_DEFAULT_SRC = ("'none'",)
CSP_STYLE_SRC = (
    "'self'",
    "https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css",
    "'unsafe-inline'"
)
CSP_SCRIPT_SRC = (
    "'self'",
    "https://code.jquery.com/jquery-3.5.1.slim.min.js",
    "'unsafe-inline'"
)
CSP_IMG_SRC = (
    "'self'",
    "data:",
    "http://127.0.0.1:8000/media/",  # Allows images from your media directory
)
CSP_CONNECT_SRC = ("'self'", 'http://127.0.0.1:8000')




# settings.py

CSRF_COOKIE_DOMAIN = None  # Adjust this if your site is not saving cookies
CSRF_COOKIE_SECURE = False  # Set to True if you are using HTTPS
CSRF_COOKIE_HTTPONLY = False  # Set to True to prevent client-side scripts from accessing the CSRF cookie

ROOT_URLCONF = 'kaysecure.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ["templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'kaysecure.wsgi.application'


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

AUTH_USER_MODEL = 'auth.User'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'),)

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CONFIGURE APP EMAIL BACKEND
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'kaysecureng@gmail.com'
EMAIL_HOST_PASSWORD = 'hcknkvxcrinuhzua'
DEFAULT_FROM_EMAIL = 'kaysecureng@gmail.com'


# Phishing email settings (using a different email address)
PHISHING_EMAIL_HOST_USER = 'kaysecurephishingkaysecure@gmail.com'
PHISHING_EMAIL_HOST_PASSWORD = 'sebgkfmrydigperm'
PHISHING_EMAIL_FROM = 'kaysecurephishingkaysecure@gmail.com'